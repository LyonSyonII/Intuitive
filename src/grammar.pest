// Character rules
WHITESPACE = _{ LINKER+ | "\t" }
NOTHING = _{ WHITESPACE | "" }
 
// Synonyms
LINKER = _{ " es " | " és " | " a " | " que " | " than " | " is " | " to " | " " | " compleix " }
Newline = { NEWLINE }
KEYWORD = _{ EQUAL | ADD | SUB | MUL | DIV | LINKER | PRINT | IF | ELSE | THEN | OR | LESS | MORE }
DEF = _{ ^"defineix" | ^"def" | ^"define" }
AS = _{ "com" | "as" }
EQUAL = _{ "equal" | "igual" | "=" }
ADD = _{  "mes" | "més" | "plus" | "+" }
SUB = _{ "menys" | "minus" | "-" }
MUL = _{ "per" | "multiplicat per" | "times" | "multiplied by" | "*" }
DIV = _{ "entre" | "dividit entre" | "divided by" | "/" }
PRINT = _{ ^"print" | ^"imprimeix" | ^"imprimir" | ^"escriu" }
IF = _{ ^"si" | ^"if" }
ELSE = _{ ^"else" | ^"si no" | ^"si cap" | ^"if none" }
ELSEIF = _{ ^"si no pero" | ^"else but" | ^"else if" }
THEN = _{ ("llavors" | "then") ~ ":"? | ":" }
OR = _{ "o" | "or" }
LESS = _{ ("mes" | "més") ~ "petit" | "menor" | "less than" | "smaller than" | "<" }
LESS_EQ = _{ LESS ~ OR ~ EQUAL_CMP | "<=" }
MORE = _{ ("mes" | "més") ~ "gran" | "major" | "more than" | "larger than" | ">" }
MORE_EQ = _{ MORE ~ OR ~ EQUAL_CMP | ">=" }
EQUAL_CMP = _{ "equal" | "igual" | "equivalent" | "mateix" | "==" | "=" }
 
// Atomics
MAIN = _{ NOTHING ~ (Err | Expr | COMM | Newline)* ~ NOTHING }

Comment = { (!("(" | ")") ~ ANY)* }
COMM = _{ "(" ~ Comment ~ ")" }
Name = @{ !KEYWORD ~ (ASCII_ALPHA_UPPER ~ (ASCII_ALPHA)*) }
Float = @{ ASCII_DIGIT+ ~ "," ~ ASCII_DIGIT+ }
Int = @{ ASCII_DIGIT+ }
FmtString = { Name ~ String ~ (String | Name)* | String ~ Name ~ (String | Name)* }
String = @{ "\"" ~ (!"\"" ~ ANY)+ ~ "\"" }
True = { ^"cert" | ^"true" }
False = { ^"fals" | ^"false" }
Value = _{ Num | FmtString | String }
Num = _{ Float | Int }
PrintRhs = _{ Op | Num | String | !KEYWORD ~ Name }
Rhs = _{ Op | Value | Name }
NumRhs = _{ Op | Num | Name }
Lhs = _{ Value | Name }
NumLhs = _{ Num | Name }
 
// Binary expressions
Add = { NumLhs ~ ADD ~ NumRhs }
Sub = { NumLhs ~ SUB ~ NumRhs }
Mul = { NumLhs ~ MUL ~ NumRhs }
Div = { NumLhs ~ DIV ~ NumRhs }

Less = { Rhs ~ LESS ~ Rhs }
LessEq = { Rhs ~ LESS_EQ ~ Rhs }
More = {Rhs ~ MORE ~ Rhs }
MoreEq = { Rhs ~ MORE_EQ ~ Rhs }
EqCmp = { Rhs ~ EQUAL_CMP ~ Rhs }

// Compound expressions
EXPRS = _{ NESTED_EXPRS | SIMPLE_EXPRS }
NESTED_EXPRS = _{ If | Else | ElseIf }
SIMPLE_EXPRS = _{ Def | Assign | Print }
Expr = _{ EXPRS ~ "." }
IfExpr = _{ SIMPLE_EXPRS ~ "," }
Op = { Add | Sub | Mul | Div }
Cmp = { LessEq | Less | MoreEq | More | EqCmp }
Def = { DEF ~ Name ~ (AS ~ Rhs)? }
Assign = { Name ~ EQUAL ~ Rhs }
Print = { PRINT ~ PrintRhs+ }
If = { IF ~ Cmp ~ THEN ~ NEWLINE? ~ IfExpr* ~ SIMPLE_EXPRS }
Else = { ELSE ~ THEN? ~ NEWLINE? ~ IfExpr* ~ SIMPLE_EXPRS }
ElseIf = { ELSEIF ~ Cmp ~ THEN ~ IfExpr* ~ SIMPLE_EXPRS }

// Errors
Err = { NotDot | NotUpper }
NotDot = { EXPRS ~ !("." | ",") }
NotUpper = { !KEYWORD ~ ASCII_ALPHA_LOWER+ }
//WrongToken = { Name ~ Name }
NotInit = { "UNREACHABLE" }
