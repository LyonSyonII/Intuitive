// Character rules
WHITESPACE = _{ LINKER+ | "\t" }
NOTHING = _{ WHITESPACE | "" }
Newline = { NEWLINE }

// Synonyms
LINKER_EN = _{" " ~ ("than" | "is" | "to" | "also" | "of") ~ " "}
LINKER_CAT = _{" " ~ ("es" | "és" | "a" | "que" | "compleix" | "també" | "tambe") ~ " "}
LINKER = _{ LINKER_EN | LINKER_CAT | " " }


KEYWORD = _{ EQUAL | EQUAL_CMP | ADD | SUB | MUL | DIV | LINKER | PRINT | IF | ELSE | ELSEIF | THEN | OR | LESS | MORE }

DEF_EN = _{ ^"define" | ^"def" }
DEF_CAT = _{ ^"defineix" }
DEF = _{ DEF_EN | DEF_CAT }

AS_EN = _{ "as" }
AS_CAT = _{ "com" }
AS = _{ AS_EN | AS_CAT }

EQUAL_EN = _{ "equal" }
EQUAL_CAT = _{ "igual" }
EQUAL = _{ EQUAL_EN | EQUAL_CAT | "=" }

ADD_EN = _{ "plus" }
ADD_CAT = _{ "mes" | "més" }
ADD = _{  ADD_EN | ADD_CAT | "+" }

SUB_EN = _{ "minus" }
SUB_CAT = _{ "menys" }
SUB = _{ SUB_EN | SUB_CAT | "-" }

MUL_EN = _{ "times" | "multiplied by" }
MUL_CAT = _{ "per" | "multiplicat per" }
MUL = _{ MUL_CAT | MUL_EN | "*" }

DIV_EN = _{ "divided by" }
DIV_CAT = _{ "entre" | "dividit entre" }
DIV = _{ DIV_EN | DIV_CAT | "/" }

NUM_OPS = _{ ADD | SUB | MUL | DIV }

// Or used in >= and <=
OR_LM_EQ_EN = _{ "or" }
OR_LM_EQ_CAT = _{ "o" }
OR_LM_EQ = _{ OR_LM_EQ_EN | OR_LM_EQ_CAT }

LESS_EN = _{ "less" | "smaller" }
LESS_CAT = _{ ("mes" | "més") ~ "petit" | "menor" }
LESS = _{ LESS_EN | LESS_CAT | "<" }
LESS_EQ = _{ LESS ~ OR ~ EQUAL_CMP | "<=" }

MORE_EN = _{ "more" | "larger" }
MORE_CAT = _{ ("mes" | "més") ~ "gran" | "major" }
MORE = _{  MORE_EN | MORE_CAT | ">" }
MORE_EQ = _{ MORE ~ OR ~ EQUAL_CMP | ">=" }

EQUAL_CMP_EN = _{ "equal" | "same" }
EQUAL_CMP_CAT = _{ "igual" | "equivalent" | "mateix" }
EQUAL_CMP = _{ EQUAL_CMP_EN | EQUAL_CMP_CAT | "==" | "=" }

// Or used in logical expressions (e.g: if A > 5 OR A < 0 )
OR = _{ OR_LM_EQ | "||" }

// And used in logical expressions (e.g: if A > 5 AND A < 0)
AND_EN = _{ "and" }
AND_CAT = _{ "i" }
AND = _{ AND_EN | AND_CAT | "&&" }

PRINT_EN = _{ ^"print" | ^"write" }
PRINT_CAT = _{^"imprimeix" | ^"imprimir" | ^"escriu" }
PRINT = _{ PRINT_EN | PRINT_CAT }

IF_EN = _{ ^"if" }
IF_CAT = _{ ^"si" }
IF = _{ IF_EN | IF_CAT }

ELSE_EN = _{ ^"else" | ^"if none" }
ELSE_CAT = _{ ^"si no" | ^"si cap" }
ELSE = _{ ELSE_EN | ELSE_CAT }

ELSEIF_EN = _{ ^"else but" | ^"else if" }
ELSEIF_CAT = _{ ^"si no pero" | ^"si no i" }
ELSEIF = _{ ELSEIF_EN | ELSEIF_CAT }

THEN_EN = _{ "then" }
THEN_CAT = _{ "llavors" }
THEN = _{ (THEN_EN | THEN_CAT) ~ ":"? | ":" }
 
// Atomics
MAIN = _{ NOTHING ~ (Err | EXPR | COMMENT | Newline)* ~ NOTHING }

Comment = { (!("(" | ")") ~ ANY)* }
COMMENT = _{ "(" ~ Comment ~ ")" }

Name = @{ !KEYWORD ~ (ASCII_ALPHA_UPPER ~ (ASCII_ALPHA)*) }
Float = @{ ASCII_DIGIT+ ~ "," ~ ASCII_DIGIT+ }
Int = @{ "-"? ~ ASCII_DIGIT+ }
FmtString = { (Op | NUM | String | Name) ~ (Op | NUM | String | Name)+ }
String = @{ "\"" ~ (!"\"" ~ ANY)+ ~ "\"" }

True = { ^"cert" | ^"true" }
False = { ^"fals" | ^"false" }

VALUE = _{ NUM | STR }
NUM = _{ Float | Int }
STR = _{ FmtString | String }

RHS = _{ STR | Op | NUM | Name }
NUM_RHS = _{ Op | NUM | Name }
LHS = _{ VALUE | Name }
NUM_LHS = _{ NUM | Name }
PRINT_LHS = _{ Op | NUM | String | !KEYWORD ~ Name }
 
// Binary expressions
Add = { NUM_LHS ~ ADD ~ NUM_RHS }
Sub = { NUM_LHS ~ SUB ~ NUM_RHS }
Mul = { NUM_LHS ~ MUL ~ NUM_RHS }
Div = { NUM_LHS ~ DIV ~ NUM_RHS }

Less = { RHS ~ LESS ~ RHS }
LessEq = { RHS ~ LESS_EQ ~ RHS }
More = {RHS ~ MORE ~ RHS }
MoreEq = { RHS ~ MORE_EQ ~ RHS }
EqCmp = { RHS ~ EQUAL_CMP ~ RHS }

// Compound expressions
EXPR = _{ EXPRS ~ "." }
EXPRS = _{ NESTED_EXPRS | SIMPLE_EXPRS }
NESTED_EXPRS = _{ If | Else | ElseIf }
SIMPLE_EXPRS = _{ Def | Assign | Print }
IFEXPR = _{ SIMPLE_EXPRS ~ "," }

Op = { Add | Sub | Mul | Div }
Cmp = { LessEq | Less | MoreEq | More | EqCmp }
Def = { DEF ~ Name ~ (AS ~ RHS)? }
Assign = { Name ~ EQUAL ~ RHS }
Print = { PRINT ~ PRINT_LHS+ }
If = { IF ~ Cmp ~ THEN ~ NEWLINE? ~ IFEXPR* ~ SIMPLE_EXPRS }
Else = { ELSE ~ THEN? ~ NEWLINE? ~ IFEXPR* ~ SIMPLE_EXPRS }
ElseIf = { ELSEIF ~ Cmp ~ THEN ~ IFEXPR* ~ SIMPLE_EXPRS }

// Errors
Err = { StrOp | NotDot | NotUpper }
NotDot = { EXPRS ~ !("." | ",") }
NotUpper = { !KEYWORD ~ ASCII_ALPHA_LOWER+ }
//StrOp = { (!STR ~ !("." | ",") ~ !NEWLINE ~ !PRINT ~ ANY)+ ~ STR ~ NUM_OPS ~ ANY* | (!NUM_OPS ~ !("." | ",") ~ !NEWLINE ~ !PRINT ~ ANY)+ ~ NUM_OPS ~ STR ~ ANY* }
StrOp = @{ (!STR ~ !NEWLINE ~ ANY)* ~ NUM_OPS ~ " "* ~ STR ~ (!NEWLINE ~ ANY)* | (!STR ~ !NEWLINE ~ ANY)* ~ STR ~ " "* ~ NUM_OPS ~ (!NEWLINE ~ ANY)* }
NotInit = { "UNREACHABLE" }
