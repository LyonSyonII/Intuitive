// Character rules
WHITESPACE = _{ LINKER+ | "\t" }
NOTHING = _{ WHITESPACE | "" }
Newline = { NEWLINE }

// Synonyms
LINKER_EN = _{ " " ~ ("than" | "is" | "to" | "also" | "of") ~ " " }
LINKER_CAT = _{ " " ~ ("es" | "és" | "a" | "que" | "compleix" | "també" | "tambe") ~ " " }
LINKER = _{ LINKER_EN | LINKER_CAT | " " }

KEYWORD = _{ EQUAL | EQUAL_CMP | ADD | SUB | MUL | DIV | LINKER | PRINT | IF | ELSE | ELSEIF | THEN | OR | LOWER | GREATER }

DEF_EN = _{ ^"define" | ^"def" }
DEF_CAT = _{ ^"defineix" }
DEF = _{ DEF_EN | DEF_CAT }

AS_EN = _{ "as" }
AS_CAT = _{ "com" }
AS = _{ AS_EN | AS_CAT }

TO_EN = _{ "to" }
TO_CAT = _{ "a" }
TO = _{ TO_EN | TO_CAT }

BY_EN = _{ "by" }
BY_CAT = _{ "per" }
BY = _{ BY_EN | BY_CAT }

EQUAL_EN = _{ "equal" }
EQUAL_CAT = _{ "igual" }
EQUAL = _{ EQUAL_EN | EQUAL_CAT | "=" }

ADD_EN = _{ "plus" }
ADD_CAT = _{ "mes" | "més" }
ADD = _{ ADD_EN | ADD_CAT | "+" }
ADD_EQ_EN = _{ ^"add" }
ADD_EQ_CAT = _{ ^"suma" | ^"afegeix" }
ADD_EQ = _{ ADD_EQ_EN | ADD_EQ_CAT }

SUB_EN = _{ "minus" }
SUB_CAT = _{ "menys" }
SUB = _{ SUB_EN | SUB_CAT | "-" }
SUB_EQ_EN = _{ ^"substract" | ^"sub" }
SUB_EQ_CAT = _{ ^"resta" | ^"treu" }
SUB_EQ = _{ SUB_EQ_EN | SUB_EQ_CAT }
SUB_TO_EN = _{ "from" }
SUB_TO = _{ TO | SUB_TO_EN}

MUL_EN = _{ "times" | "multiplied by" }
MUL_CAT = _{ "per" | "multiplicat per" }
MUL = _{ MUL_CAT | MUL_EN | "*" }
MUL_EQ_EN = _{ ^"multiply" | ^"mult" }
MUL_EQ_CAT = _{ ^"multiplica" }
MUL_EQ = _{ MUL_EQ_EN | MUL_EQ_CAT }

DIV_EN = _{ "divided by" }
DIV_CAT = _{ "entre" | "dividit entre" }
DIV = _{ DIV_EN | DIV_CAT | "/" }
DIV_EQ_EN = _{ ^"divide" | ^"div" }
DIV_EQ_CAT = _{ "divideix" }
DIV_EQ = _{ DIV_EQ_EN | DIV_EQ_CAT }
DIV_BY_CAT = _{ "entre" }
DIV_BY = _{ BY_EN | DIV_BY_CAT}

NUM_OPS = _{ ADD | SUB | MUL | DIV }

// Or used in >= and <=
OR_LM_EQ_EN = _{ "or" }
OR_LM_EQ_CAT = _{ "o" }
OR_LM_EQ = _{ OR_LM_EQ_EN | OR_LM_EQ_CAT }

LOW_EN = _{ "less" | "smaller" | "lower" }
LOW_CAT = _{ ("mes" | "més") ~ "petit" | "menor" }
LOWER = _{ LOW_EN | LOW_CAT | "<" }
LOW_EQ = _{ LOWER ~ OR ~ EQUAL_CMP | "<=" }

GREAT_EN = _{ "more" | "larger" | "greater" }
GREAT_CAT = _{ ("mes" | "més") ~ "gran" | "major" }
GREATER = _{  GREAT_EN | GREAT_CAT | ">" }
GREAT_EQ = _{ GREATER ~ OR ~ EQUAL_CMP | ">=" }

EQUAL_CMP_EN = _{ "equal" | "same" }
EQUAL_CMP_CAT = _{ "igual" | "equivalent" | "mateix" }
EQUAL_CMP = _{ EQUAL_CMP_EN | EQUAL_CMP_CAT | "==" | "=" }

NOTEQ_EN = _{ ("not" ~ EQUAL_CMP_EN) | "different" }
NOTEQ_CAT = _{ ("no" ~ EQUAL_CMP_CAT) | "diferent" }
NOTEQ = _{ NOTEQ_EN | NOTEQ_CAT | "!=" | "!==" }

// Or used in logical expressions (e.g: if A > 5 OR A < 0 )
OR = _{ OR_LM_EQ | "||" }
// And used in logical expressions (e.g: if A > 5 AND A < 0)
AND_EN = _{ "and" }
AND_CAT = _{ "i" }
AND = _{ AND_EN | AND_CAT | "&&" }

PRINT_EN = _{ ^"print" | ^"write" }
PRINT_CAT = _{^"imprimeix" | ^"imprimir" | ^"escriu" }
PRINT = _{ PRINT_EN | PRINT_CAT }

READ_EN = _{ ^"read" | ^"input" }
READ_CAT = _{ ^"llegeix" | ^"introdueix" }
READ = _{ READ_EN | READ_CAT }

IF_EN = _{ ^"if" }
IF_CAT = _{ ^"si" }
IF = _{ IF_EN | IF_CAT }

ELSE_EN = _{ ^"else" | ^"if none" }
ELSE_CAT = _{ ^"si no" | ^"si cap" }
ELSE = _{ ELSE_EN | ELSE_CAT }

ELSEIF_EN = _{ ^"else but" | ^"else if" }
ELSEIF_CAT = _{ ^"si no pero" | ^"si no i" | ^"d'altra banda si" | "en canvi si" }
ELSEIF = _{ ELSEIF_EN | ELSEIF_CAT }

THEN_EN = _{ "then" }
THEN_CAT = _{ "llavors" }
THEN = _{ (THEN_EN | THEN_CAT) ~ ":"? | ":" }
 
// Atomics
MAIN = _{ NOTHING ~ ((Err | EXPR | COMMENT | Newline)+ | Empty | InvalidExpr) ~ NOTHING }

Comment = { (!("(" | ")") ~ ANY)* }
COMMENT = _{ "(" ~ Comment ~ ")" }

// Variables
Name = @{ !KEYWORD ~ (ASCII_ALPHA_UPPER ~ (ASCII_ALPHA)*) }
Float = @{ ASCII_DIGIT+ ~ "," ~ ASCII_DIGIT+ }
Int = @{ "-"? ~ ASCII_DIGIT+ }
FmtString = { (Op | NUM | String | Name) ~ " "* ~ (" "? ~ (Op | NUM | String | Name))+ }
String = @{ "\"" ~ (!"\"" ~ ANY)+ ~ "\"" }
TRUE_EN = _{ ^"true" }
TRUE_CAT = _{ ^"cert" | ^"certa" }
True = { TRUE_EN | TRUE_CAT }
FALSE_EN = _{ ^"false" }
FALSE_CAT = _{ ^"fals" | ^"falsa" }
False = { FALSE_EN | FALSE_CAT }

VALUE = _{ NUM | STR }
NUM = _{ Float | Int }
STR = _{ FmtString | String }

// Types
TYINT_EN = _{ ^"integer" | ^"integers" | ^"ints" | ^"int" }
TYINT_CAT = _{ ^"enter" | ^"enters" }
TypeInt = { TYINT_EN | TYINT_CAT }

TYFLOAT_EN = _{ ^"reals" | ^"real" | ^"decimal" | ^"decimals" | ^"floats" | ^"float" | ^"numbers" | ^"nums" | ^"num" }
TYFLOAT_CAT = _{ ^"flotants" | ^"flotants" | ^"numeros" | ^"números" | ^"núms" | ^"nombres"}
TypeFloat = { TYFLOAT_EN | TYFLOAT_CAT }

TYSTR_EN = _{ ^"words" | ^"word" | ^"strings" | ^"string" }
TYSTR_CAT = _{ ^"paraules" | ^"paraula" }
TypeStr = { TYSTR_EN | TYSTR_CAT }

TYPE = _{ TypeInt | TypeFloat | TypeStr }

// ListsRHS = _{ Newline* ~ (NotUpper | Op | Cmp | STR | NUM | Name) ~ Newline* }
MADEOF_EN = _{ "made of" | "formed by" | "of" }
MADEOF_CAT = _{ "feta de"| "formada per" | "de" | "d'" }
MADEOF = _{ MADEOF_EN | MADEOF_CAT }

LIST_COMM = _{ Name ~ " "* ~ MADEOF ~ WHITESPACE? ~ TYPE ~ ":" ~ WHITESPACE? ~ Newline? ~ (RHS ~ "," ~ WHITESPACE? ~ Newline*)* ~ RHS}
LIST_DASH = _{ Name ~ " "* ~ MADEOF ~ WHITESPACE? ~ TYPE ~ ":" ~ WHITESPACE? ~ Newline? ~ ("-" ~ ">"? ~ WHITESPACE? ~ RHS ~ Newline)* ~ "-" ~ ">"? ~ WHITESPACE? ~ RHS ~ NEWLINE? }
List = ${ LIST_COMM | LIST_DASH }

// Expr sides
RHS = _{ NotUpper | Op | Cmp | STR | NUM | Name | Empty }
LHS = _{ String | NUM | Name }
PRINT_LHS = _{ NotUpper | Op | NUM | String | !KEYWORD ~ Name }
 
// Binary expressions
Add = { LHS ~ LINKER* ~ ADD ~ LINKER* ~ RHS }
Sub = { LHS ~ LINKER* ~ SUB ~ LINKER* ~ RHS }
Mul = { LHS ~ LINKER* ~ MUL ~ LINKER* ~ RHS }
Div = { LHS ~ LINKER* ~ DIV ~ LINKER* ~ RHS }

And = { LHS ~ LINKER* ~ AND ~ LINKER* ~ RHS }
Or = { LHS ~ LINKER* ~ OR ~ LINKER* ~ RHS }

Lower = { LHS ~ LOWER ~ RHS }
LowEq = { LHS ~ LOW_EQ ~ RHS }
Greater = { LHS ~ GREATER ~ RHS }
GreatEq = { LHS ~ GREAT_EQ ~ RHS }
EqCmp = { LHS ~ EQUAL_CMP ~ RHS }
NotEq = { LHS ~ NOTEQ ~ RHS }

AddEq = ${ ADD_EQ ~ " "+ ~ RHS ~ " "+ ~ TO ~ " "+ ~ Name }
SubEq = ${ SUB_EQ ~ " "+ ~ RHS ~ " "+ ~ SUB_TO ~ " "+ ~ Name }
MulEq = ${ MUL_EQ ~ " "+ ~ Name ~ " "+ ~ BY ~ " "+ ~ RHS }
DivEq = ${ DIV_EQ ~ " "+ ~ Name ~ " "+ ~ DIV_BY ~ " "+ ~ RHS }

// Compound expressions
EXPR = _{ EXPRS ~ "." }
EXPRS = _{ NESTED_EXPRS | SIMPLE_EXPRS }
NESTED_EXPRS = _{ If | Else | ElseIf | Function }
SIMPLE_EXPRS = _{ Def | Assign | Print | Read | AddEq | SubEq | MulEq | DivEq | List }
IFEXPR = _{ SIMPLE_EXPRS ~ "," }

Op = { Add | Sub | Mul | Div | And | Or }
Cmp = { LowEq | Lower | GreatEq | Greater | EqCmp | NotEq }
Def = { DEF ~ Name ~ (AS ~ (TYPE | RHS))? }
Assign = ${ Name ~ LINKER+ ~ EQUAL ~ LINKER+ ~ RHS }
Print = { PRINT ~ PRINT_LHS+ }
Read = { READ ~ String? ~ Name ~ (AS ~ TYPE)? }
If = { IF ~ Cmp ~ THEN ~ NEWLINE? ~ IFEXPR* ~ SIMPLE_EXPRS }
ElseIf = { ELSEIF ~ Cmp ~ THEN ~ NEWLINE? ~ IFEXPR* ~ SIMPLE_EXPRS }
Else = { ELSE ~ THEN? ~ NEWLINE? ~ IFEXPR* ~ SIMPLE_EXPRS }

FUNC_COMM = _{ Name ~ ":" ~ WHITESPACE? ~ Newline? ~ (EXPRS ~ "," ~ WHITESPACE? ~ Newline*)* ~ (EXPRS | Name)}
FUNC_DASH = _{ Name ~ ":" ~ WHITESPACE? ~ Newline? ~ ("-" ~ ">"? ~ WHITESPACE? ~ EXPRS ~ ","? ~Newline)* ~ "-" ~ ">"? ~ WHITESPACE? ~ (EXPRS | Name) ~ NEWLINE? }
Function = ${ FUNC_COMM | FUNC_DASH }

// Errors
Err = { NestedIf | NotCmpIf | CmpElse | NotUpper | NotVarRead | ReadFmtStr | NotDot | EmptyStr }
EmptyStr = { (!"\"" ~ ANY)* ~ "\"\"" ~ ANY* }
NotDot = { EXPRS ~ !("." | ",") }
NotUpper = @{ " "* ~ (!KEYWORD ~ ASCII_ALPHA_LOWER)+ ~ " "* ~ "."? }
NotVarRead = { READ ~ !Name ~ !FmtString ~ RHS ~ (AS ~ TYPE)? }
NotCmpIf = { (ELSEIF | IF) ~ THEN ~ NEWLINE? ~ IFEXPR* ~ SIMPLE_EXPRS }
CmpElse = { ELSE ~ Cmp ~ THEN? ~ NEWLINE? ~ IFEXPR* ~ SIMPLE_EXPRS }
NestedIf = { (IF | ELSEIF) ~ Cmp ~ THEN ~ NEWLINE? ~ (!(IF | ELSEIF | ELSE | ".") ~ ANY)* ~ (IF | ELSEIF | ELSE) ~ (!"."~ ANY)* ~ "." }

READ_FMT_STR = _{ String ~ (String | Name) ~ (String | Name) ~ ANY* | Name ~ (String | Name) ~ ANY* }
ReadFmtStr = { READ ~ READ_FMT_STR ~ (AS ~ TYPE)? }

Empty = { (!"." ~ ANY)* ~ "." }
InvalidExpr = { ANY* }
// Control rules, unreachable normally
NotInit = { "UNREACHABLE" }