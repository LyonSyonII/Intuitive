

fn read<U: std::str::FromStr + ?Sized + 'static>(message: &str) -> U {
    use std::io::{ self, Write };
    use std::any::{ TypeId };

    print!("{}", message);
    io::stdout().flush().unwrap();

    let mut inp = String::new();
    // Reads the input from STDIN and places it in the String named input.
    io::stdin().read_line(&mut inp).expect("Failed to read input.");
    
    if TypeId::of::<f64>() == TypeId::of::<U>() {
        inp = inp.replace(',', ".");
    }
    
    // Convert to another type.
    // If successful, bind to a new variable named input.
    // If failed, restart the loop.
    match inp.trim().parse::<U>() {
        Ok(inp) => inp,
        Err(_) => {
            println!("\x1b[1;31mERROR: Input is not of specified type, enter it again.\x1b[0;39m");
            read::<U>(message)
        },
    }
}